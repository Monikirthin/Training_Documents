
************************
Day 21 : 28th Feb. 2025 
************************

	Containerization using Docker ::::
		
		
	- Containerization :	It is process of packaging the Application along with its dependencies.
	
	
	- Virtual Machines :::
	
		- VMs are Hardware Level Virtualization 
		- VMs are created using Hypervisor 
		- VMs are used to execute Operating System
		- VMs will continue to run, even if there is no active Application/Task
		- VMs will consume More Space and Time to start the application/task
	
	- Containers :::
	
		- Containers are OS Level Virtualization 
		- Containers are created using Container Engine  
		- Containers are used to run the Application/Task. NOT Operating System
		- If there is not Active Task/Application, Contianers will immediately go to EXIT State.
		- Containers will consume less Space and Time to start the application/task	
		
		- Container are used to Deploy any Micro-Service Based Application Services.
		
		- Contianers run in its' own isolated address space.
		
			- By using underlying properties of Operating System :
					- Name Space					
					- Control Group 
	
	
	Terminologies / Architecture Components :
	
		Container Engine		# Is used to Create and Manage the Container Images and Containers
								# Docker Container Engine 
	
		Containerization 		# It is process of packaging the Application along with its dependencies.
		
		Container Image 		# Is a static file that defines the properties and dependencies of application to create a container.
								# Images are Non-Executable
								# Images composed of various Layer of Instructions
							
		Container				# Is an Executable unit of Container Image 
		
		Container Registry		# Is used to manage/save/version control the Container Images
								# DockerHub is one of the Container Registries
								# Create DockerHub Account 
									https://hub.docker.com/
		
		Container Repository	#	It is subset of Container Registry
		
	
	
	Infra-structure Perspectives :
	
		Jenkins :	Master-Slave Architecture
		
			Jenkins_Master (VM)				==> Install git,jdk,jenkins
					Jenkins_Slave_Node1 (VM)	==> Java Application Build 
					Jenkins_Slave_Node2 (VM)	==> Python Application Build 
					Jenkins_Slave_Node3 (VM)	==> .Net Application Build 
					Jenkins_Slave_Node4 (VM)	==> Angular Application Build 
					Jenkins_Slave_Node5 (VM)	==> NodeJS Application Build 

			Jenkins_Master (VM)				==> Install git,jdk,jenkins
			
				Jenkins_Slave_Node1 (VM)
					- Install Container Engine 
							C1 				==> Java Application Build 
							C2              ==> Python Application Build 
							C3              ==> .Net Application Build 
							C4              ==> Angular Application Build 
							C5              ==> NodeJS Application Build 
							
							
	Developer's / Deployment Perspectives :
	
			Non-Prod Environments	::

			
		
				Dev Environment		
							Create Source Code :
							
							Build : Compile & Create Artifacts 			mywebapp1.war
							Unit Level Testing 
							
							Jdk17,Tomcat8.5 -- Run *.war
							
							Containerization ::: It is process of packaging the Application along with its dependencies.
							
							
							Package/Container Image --> mywebapp1-img1 ( mywebapp1.war,jdk17,tomcat8.5)
							
							Save the Container Image mywebapp1-img1 in the DockerHub Container Registry
							
							

					QA 		# Upon Deployment of Image mywebapp1-img1
						
							
							Container Engine 
						
								Create Application Container using Image mywebapp1-img1
								
								
						
Next :

	Install Container Engine 
	DockerHub Access 
	
	Docker Cli Commands 



************************
Day 22 : 28th Feb. 2025 
************************


	- DockerHub --> Explore the Images 
	
		github 						==> Version Control Source-Codes		*.java_v1.0		*.java_v1.1
		
		
		Artifactory Library 		==> Version Control Artifacts			*.war_v1.0 		*.war_v1.1	
		(jfrog/azArtifact)
		
		Container Registry 			==> Version Control Container Images	app-img_v1.0	app-img_v1.1
		(DockerHub)
		
	Open-Source: 	DockerHub 
	
	Managed Services:
	
	AWS 	--> ECS/ECR/EKS
	Azure 	--> ACS/ACR/AKS
	GCP		--> GCE/GCR/GKE
	
	
	
	
	- Install Container Engine in Linux Machine 			# https://docs.docker.com/engine/install/
	
	
	sudo apt install docker.io -y	
	
		Install in Jenkins_Slave_Node1			# git/jdk/maven/ docker engine 
		
	
	- Docker CLI Commands :::			# To Interact with Docker Engine 
	
	
	docker --version
	
	
	docker images 				# Get the List of Images in local machine 
	
	docker ps 					# Get the List of Active Containers 
	
	docker ps -a 				# Get the List of all Container(Active/Exit)
	
	docker pull <image_name>	# To download a container image from dockerhub to local machine 
	
	docker run <image_name>		# To Create and execute/run the Container based on the Container Image 
	
	
	Three Modes of run Command :
	
		- Foreground / Active Mode : Hold the Terminal - Run the container in Active Terminal 	# Default
		
			- Syntax: 
			
				docker run <image_name> 		
		
		- Background / Detached Mode : To run the container in background mode 
		
				docker run -d <image_name> 
		
		- Interactive Mode :	To run the container in interactive mode to access 
		
				docker run -it <image_name> bash 
				
				docker run -it ubuntu bash 
		
	docker start <container_id>
	
	docker exec 				# To Login to running Container 
	
		syntax:
		
			docker exec -it <container_id> bash 
			
		Eg.:	
		
			docker exec -it df80e7e4a315 bash
	
	
	docker stop <container_id>
				
				
				
	Port Mapping/Binding ::::
	
		- Used to map the container port with the host port. 
		- Expose the Container application to Internet.
		
		
		-p host_port:container_port 
		
		
		
		docker run -it -p 8080:8089 tomcat
		
		Port Number :::
		
		tomcat / nginx / httpd 
		8080		80		80
		
		Tomcat :
		
		docker run -it -p 8080:8089 tomcat

   17  apt install docker.io -y
   18  clear
   19  docker --version
   20  docker images
   21  docker ps
   22  docker ps -a
   23  clear
   24  docker images
   25  docker pull centos
   26  docker images
   27  docker ps
   28  docker ps -a
   29  docker run centos
   30  docker ps
   31  docker ps -a
   32  clear
   33  docker ps -a
   34  docker run centos sleep 20
   35  clear
   36  docker run centos sleep 10
   37  clear
   38  docker ps
   39  docker ps -a
   40  docker run -d centos sleep 10
   41  docker ps -a
   42  docker ps
   43  clear
   44  docker images
   45  docker ps
   46  docker ps -a
   47  docker run -it centos bash
   48  clear
   49  docker ps
   50  docker ps -a
   51  clear
   52  docker ps -a
   53  cler
   54  clear
   55  docker images
   56  docker run -it ubuntu bash
   57  clear
   58  docker ps -a
   59  docker start df80e7e4a315
   60  docker ps
   61  docker exec -it df80e7e4a315 bash
   62  docker ps
   63  docker stop df80e7e4a315
   64  clear
   65  docker images
   66  docker run -it tomcat:8.0 bash
   67  clear
   68  docker run -it -p 8080:8089 tomcat:8.0
   69  clear
   70  docker run -it -p 8080:8089 tomcat:8.0 bash
   71  docker ps
   72  clear
   73  history

